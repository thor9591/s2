//.h
typedef struct stack
{
int data[200];
int top;
} stack;
void push(stack *ps,int num)
{
ps->data[++ps->top]=num;
}
int pop(stack *ps)
{
int num;
num=ps->data[ps->top--];
return num;
}

//.c
#include<stdio.h>
#include "ststack.h"
int main()
{
stack s1,temp,s2;
int isempty(stack *ps)
{
if(ps->top==-1)
return 1;
return 0;
}
int isfull(stack *ps)
{
if(ps->top==20-1)
return 1;
return 0;
}
int peek(stack *ps)
{
return ps->data[ps->top];
}
int init(stack *ps)
{
ps->top=-1;
}
init(&s1);
init(&s2);
init(&temp);
int i,n,num;
printf("How many elements in stack1: ");
scanf("%d",&n);
printf("Enter element in stack1: ");
for(i=0;i<n;i++)
{
scanf("%d",&num);
push(&s1,num); //pushing elements in stack1
}
while(!isempty(&s1))
{
push(&temp,pop(&s1));
temporary stack
}
//pushing stack1 elements in
while(!isempty(&temp))
{
push(&s1,peek(&temp));
element in stack1
push(&s2,pop(&temp));
element in stack2
}
//pushing temporary stack
//pushing temporary stack
printf("\n-----Elements of stack1 is copied in
stack2--------- \n");
}


//cc filename.h
//cc filename.c
//  ./a.out


//OUTPUT:
//How many elements in stack1: 4
//Enter element in stack1: 2
//4
//21
//3
//-----Elements of stack1 is copied in stack2------